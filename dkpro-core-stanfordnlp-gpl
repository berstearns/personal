{
  "components" : {
    "schemas" : {
      "CasConstituentToken" : {
        "type" : "object",
        "required" : [ "documentText", "language" ],
        "properties" : {
          "constituent" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Constituent"
            }
          },
          "documentText" : {
            "type" : "string"
          },
          "language" : {
            "type" : "string"
          },
          "token" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Token"
            }
          }
        }
      },
      "CasPOSSentenceToken" : {
        "type" : "object",
        "required" : [ "documentText", "language" ],
        "properties" : {
          "sentence" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Sentence"
            }
          },
          "pOS" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/POS"
            }
          },
          "documentText" : {
            "type" : "string"
          },
          "language" : {
            "type" : "string"
          },
          "token" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Token"
            }
          }
        }
      },
      "CoreferenceChain" : {
        "type" : "object",
        "required" : [ "begin", "end" ],
        "properties" : {
          "end" : {
            "type" : "integer"
          },
          "begin" : {
            "type" : "integer"
          },
          "first" : {
            "$ref" : "#/components/schemas/CoreferenceLink"
          }
        }
      },
      "CasConstituentLemmaNamedEntityPOSSentenceToken" : {
        "type" : "object",
        "required" : [ "documentText", "language" ],
        "properties" : {
          "sentence" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Sentence"
            }
          },
          "constituent" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Constituent"
            }
          },
          "pOS" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/POS"
            }
          },
          "documentText" : {
            "type" : "string"
          },
          "namedEntity" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/NamedEntity"
            }
          },
          "lemma" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Lemma"
            }
          },
          "language" : {
            "type" : "string"
          },
          "token" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Token"
            }
          }
        }
      },
      "CasStanfordSentimentAnnotation" : {
        "type" : "object",
        "required" : [ "documentText", "language" ],
        "properties" : {
          "documentText" : {
            "type" : "string"
          },
          "language" : {
            "type" : "string"
          },
          "stanfordSentimentAnnotation" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/StanfordSentimentAnnotation"
            }
          }
        }
      },
      "Token" : {
        "type" : "object",
        "required" : [ "begin", "end" ],
        "properties" : {
          "parent" : {
            "$ref" : "#/components/schemas/Annotation"
          },
          "form" : {
            "$ref" : "#/components/schemas/TokenForm"
          },
          "pos" : {
            "$ref" : "#/components/schemas/POS"
          },
          "lemma" : {
            "$ref" : "#/components/schemas/Lemma"
          },
          "syntacticFunction" : {
            "type" : "string"
          },
          "end" : {
            "type" : "integer"
          },
          "id" : {
            "type" : "string"
          },
          "text" : {
            "type" : "string"
          },
          "morph" : {
            "$ref" : "#/components/schemas/MorphologicalFeatures"
          },
          "begin" : {
            "type" : "integer"
          },
          "stem" : {
            "$ref" : "#/components/schemas/Stem"
          }
        }
      },
      "CasCoreferenceChainCoreferenceLink" : {
        "type" : "object",
        "required" : [ "documentText", "language" ],
        "properties" : {
          "coreferenceLink" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/CoreferenceLink"
            }
          },
          "documentText" : {
            "type" : "string"
          },
          "language" : {
            "type" : "string"
          },
          "coreferenceChain" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/CoreferenceChain"
            }
          }
        }
      },
      "Stem" : {
        "type" : "object",
        "required" : [ "begin", "end" ],
        "properties" : {
          "end" : {
            "type" : "integer"
          },
          "begin" : {
            "type" : "integer"
          },
          "value" : {
            "type" : "string"
          }
        }
      },
      "Lemma" : {
        "type" : "object",
        "required" : [ "begin", "end" ],
        "properties" : {
          "end" : {
            "type" : "integer"
          },
          "begin" : {
            "type" : "integer"
          },
          "value" : {
            "type" : "string"
          }
        }
      },
      "CasPOSToken" : {
        "type" : "object",
        "required" : [ "documentText", "language" ],
        "properties" : {
          "pOS" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/POS"
            }
          },
          "documentText" : {
            "type" : "string"
          },
          "language" : {
            "type" : "string"
          },
          "token" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Token"
            }
          }
        }
      },
      "CoreferenceLink" : {
        "type" : "object",
        "required" : [ "begin", "end" ],
        "properties" : {
          "next" : {
            "$ref" : "#/components/schemas/CoreferenceLink"
          },
          "referenceRelation" : {
            "type" : "string"
          },
          "referenceType" : {
            "type" : "string"
          },
          "end" : {
            "type" : "integer"
          },
          "begin" : {
            "type" : "integer"
          }
        }
      },
      "Sentence" : {
        "type" : "object",
        "required" : [ "begin", "end" ],
        "properties" : {
          "end" : {
            "type" : "integer"
          },
          "id" : {
            "type" : "string"
          },
          "begin" : {
            "type" : "integer"
          }
        }
      },
      "Constituent" : {
        "type" : "object",
        "required" : [ "begin", "end" ],
        "properties" : {
          "parent" : {
            "$ref" : "#/components/schemas/Annotation"
          },
          "constituentType" : {
            "type" : "string"
          },
          "children" : { },
          "syntacticFunction" : {
            "type" : "string"
          },
          "end" : {
            "type" : "integer"
          },
          "begin" : {
            "type" : "integer"
          }
        }
      },
      "MorphologicalFeatures" : {
        "type" : "object",
        "required" : [ "begin", "end" ],
        "properties" : {
          "voice" : {
            "type" : "string"
          },
          "mood" : {
            "type" : "string"
          },
          "gender" : {
            "type" : "string"
          },
          "degree" : {
            "type" : "string"
          },
          "animacy" : {
            "type" : "string"
          },
          "reflex" : {
            "type" : "string"
          },
          "verbForm" : {
            "type" : "string"
          },
          "number" : {
            "type" : "string"
          },
          "pronType" : {
            "type" : "string"
          },
          "negative" : {
            "type" : "string"
          },
          "person" : {
            "type" : "string"
          },
          "transitivity" : {
            "type" : "string"
          },
          "aspect" : {
            "type" : "string"
          },
          "possessive" : {
            "type" : "string"
          },
          "end" : {
            "type" : "integer"
          },
          "numType" : {
            "type" : "string"
          },
          "begin" : {
            "type" : "integer"
          },
          "value" : {
            "type" : "string"
          },
          "tense" : {
            "type" : "string"
          },
          "case" : {
            "type" : "string"
          },
          "definiteness" : {
            "type" : "string"
          }
        }
      },
      "TokenForm" : {
        "type" : "object",
        "required" : [ "begin", "end" ],
        "properties" : {
          "end" : {
            "type" : "integer"
          },
          "begin" : {
            "type" : "integer"
          },
          "value" : {
            "type" : "string"
          }
        }
      },
      "CasSentenceToken" : {
        "type" : "object",
        "required" : [ "documentText", "language" ],
        "properties" : {
          "sentence" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Sentence"
            }
          },
          "documentText" : {
            "type" : "string"
          },
          "language" : {
            "type" : "string"
          },
          "token" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Token"
            }
          }
        }
      },
      "Dependency" : {
        "type" : "object",
        "required" : [ "begin", "end" ],
        "properties" : {
          "flavor" : {
            "type" : "string"
          },
          "dependencyType" : {
            "type" : "string"
          },
          "end" : {
            "type" : "integer"
          },
          "governor" : {
            "$ref" : "#/components/schemas/Token"
          },
          "begin" : {
            "type" : "integer"
          },
          "dependent" : {
            "$ref" : "#/components/schemas/Token"
          }
        }
      },
      "CasNamedEntity" : {
        "type" : "object",
        "required" : [ "documentText", "language" ],
        "properties" : {
          "documentText" : {
            "type" : "string"
          },
          "namedEntity" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/NamedEntity"
            }
          },
          "language" : {
            "type" : "string"
          }
        }
      },
      "CasConstituentDependency" : {
        "type" : "object",
        "required" : [ "documentText", "language" ],
        "properties" : {
          "constituent" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Constituent"
            }
          },
          "dependency" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Dependency"
            }
          },
          "documentText" : {
            "type" : "string"
          },
          "language" : {
            "type" : "string"
          }
        }
      },
      "Annotation" : {
        "type" : "object",
        "required" : [ "begin", "end" ],
        "properties" : {
          "end" : {
            "type" : "integer"
          },
          "begin" : {
            "type" : "integer"
          }
        }
      },
      "StanfordSentimentAnnotation" : {
        "type" : "object",
        "required" : [ "begin", "end" ],
        "properties" : {
          "veryNegative" : { },
          "negative" : { },
          "neutral" : { },
          "veryPositive" : { },
          "end" : {
            "type" : "integer"
          },
          "positive" : { },
          "begin" : {
            "type" : "integer"
          }
        }
      },
      "NamedEntity" : {
        "type" : "object",
        "required" : [ "begin", "end" ],
        "properties" : {
          "identifier" : {
            "type" : "string"
          },
          "end" : {
            "type" : "integer"
          },
          "begin" : {
            "type" : "integer"
          },
          "value" : {
            "type" : "string"
          }
        }
      },
      "CasLemma" : {
        "type" : "object",
        "required" : [ "documentText", "language" ],
        "properties" : {
          "documentText" : {
            "type" : "string"
          },
          "lemma" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Lemma"
            }
          },
          "language" : {
            "type" : "string"
          }
        }
      },
      "POS" : {
        "type" : "object",
        "required" : [ "begin", "end" ],
        "properties" : {
          "posValue" : {
            "type" : "string"
          },
          "end" : {
            "type" : "integer"
          },
          "begin" : {
            "type" : "integer"
          },
          "coarseValue" : {
            "type" : "string"
          }
        }
      },
      "CasDependency" : {
        "type" : "object",
        "required" : [ "documentText", "language" ],
        "properties" : {
          "dependency" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Dependency"
            }
          },
          "documentText" : {
            "type" : "string"
          },
          "language" : {
            "type" : "string"
          }
        }
      },
      "CasPOS" : {
        "type" : "object",
        "required" : [ "documentText", "language" ],
        "properties" : {
          "pOS" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/POS"
            }
          },
          "documentText" : {
            "type" : "string"
          },
          "language" : {
            "type" : "string"
          }
        }
      }
    }
  },
  "openapi" : "3.0.0",
  "paths" : {
    "/StanfordSentimentAnalyzer" : {
      "post" : {
        "summary" : "Experimental wrapper for edu.stanford.nlp.pipeline.SentimentAnnotator which assigns\n5 scores to each sentence. NOTE: Is very slow in the current state as it runs full Stanford\npipeline and does not take into account any existing DKPro annotations.",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CasSentenceToken"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CasStanfordSentimentAnnotation"
                }
              }
            }
          }
        },
        "parameters" : [ ]
      }
    },
    "/StanfordNamedEntityRecognizer" : {
      "post" : {
        "summary" : "Stanford Named Entity Recognizer component.",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CasSentenceToken"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CasNamedEntity"
                }
              }
            }
          }
        },
        "parameters" : [ {
          "schema" : {
            "default" : [ "false" ],
            "type" : "boolean"
          },
          "in" : "query",
          "name" : "printTagSet",
          "description" : "Log the tag set(s) when a model is loaded.",
          "required" : true
        }, {
          "schema" : {
            "default" : [ "org.apache.uima.fit.descriptor.ConfigurationParameter.NO_DEFAULT_VALUE" ],
            "type" : "string"
          },
          "in" : "query",
          "name" : "language",
          "description" : "Use this language instead of the document language to resolve the model.",
          "required" : false
        }, {
          "schema" : {
            "default" : [ "org.apache.uima.fit.descriptor.ConfigurationParameter.NO_DEFAULT_VALUE" ],
            "type" : "string"
          },
          "in" : "query",
          "name" : "modelVariant",
          "description" : "Variant of a model the model. Used to address a specific model if here are multiple models\nfor one language.",
          "required" : false
        }, {
          "schema" : {
            "default" : [ "org.apache.uima.fit.descriptor.ConfigurationParameter.NO_DEFAULT_VALUE" ],
            "type" : "string"
          },
          "in" : "query",
          "name" : "modelArtifactUri",
          "description" : "URI of the model artifact. This can be used to override the default model resolving \nmechanism and directly address a particular model.\n\n<p>The URI format is mvn:${groupId:${artifactId}:${version}}. Remember to set\nthe variant parameter to match the artifact. If the artifact contains the model in\na non-default location, you  also have to specify the model location parameter, e.g.\nclasspath:/model/path/in/artifact/model.bin.</p>",
          "required" : false
        }, {
          "schema" : {
            "default" : [ "org.apache.uima.fit.descriptor.ConfigurationParameter.NO_DEFAULT_VALUE" ],
            "type" : "string"
          },
          "in" : "query",
          "name" : "modelLocation",
          "description" : "Location from which the model is read.",
          "required" : false
        }, {
          "schema" : {
            "default" : [ "org.apache.uima.fit.descriptor.ConfigurationParameter.NO_DEFAULT_VALUE" ],
            "type" : "string"
          },
          "in" : "query",
          "name" : "NamedEntityMappingLocation",
          "description" : "Location of the mapping file for named entity tags to UIMA types.",
          "required" : false
        }, {
          "schema" : {
            "default" : [ "true" ],
            "type" : "boolean"
          },
          "in" : "query",
          "name" : "ptb3Escaping",
          "description" : "Enable all traditional PTB3 token transforms (like -LRB-, -RRB-).",
          "required" : true
        }, {
          "schema" : {
            "default" : [ "org.apache.uima.fit.descriptor.ConfigurationParameter.NO_DEFAULT_VALUE" ]
          },
          "in" : "query",
          "name" : "quoteBegin",
          "description" : "List of extra token texts (usually single character strings) that should be treated like\nopening quotes and escaped accordingly before being sent to the parser.",
          "required" : false
        }, {
          "schema" : {
            "default" : [ "org.apache.uima.fit.descriptor.ConfigurationParameter.NO_DEFAULT_VALUE" ]
          },
          "in" : "query",
          "name" : "quoteEnd",
          "description" : "List of extra token texts (usually single character strings) that should be treated like\nclosing quotes and escaped accordingly before being sent to the parser.",
          "required" : false
        } ]
      }
    },
    "/StanfordPosTagger" : {
      "post" : {
        "summary" : "Stanford Part-of-Speech tagger component.",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CasSentenceToken"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CasPOS"
                }
              }
            }
          }
        },
        "parameters" : [ {
          "schema" : {
            "default" : [ "false" ],
            "type" : "boolean"
          },
          "in" : "query",
          "name" : "printTagSet",
          "description" : "Log the tag set(s) when a model is loaded.",
          "required" : true
        }, {
          "schema" : {
            "default" : [ "org.apache.uima.fit.descriptor.ConfigurationParameter.NO_DEFAULT_VALUE" ],
            "type" : "string"
          },
          "in" : "query",
          "name" : "language",
          "description" : "Use this language instead of the document language to resolve the model and tag set mapping.",
          "required" : false
        }, {
          "schema" : {
            "default" : [ "org.apache.uima.fit.descriptor.ConfigurationParameter.NO_DEFAULT_VALUE" ],
            "type" : "string"
          },
          "in" : "query",
          "name" : "modelVariant",
          "description" : "Variant of a model the model. Used to address a specific model if here are multiple models\nfor one language.",
          "required" : false
        }, {
          "schema" : {
            "default" : [ "org.apache.uima.fit.descriptor.ConfigurationParameter.NO_DEFAULT_VALUE" ],
            "type" : "string"
          },
          "in" : "query",
          "name" : "modelArtifactUri",
          "description" : "URI of the model artifact. This can be used to override the default model resolving \nmechanism and directly address a particular model.\n\n<p>The URI format is mvn:${groupId:${artifactId}:${version}}. Remember to set\nthe variant parameter to match the artifact. If the artifact contains the model in\na non-default location, you  also have to specify the model location parameter, e.g.\nclasspath:/model/path/in/artifact/model.bin.</p>",
          "required" : false
        }, {
          "schema" : {
            "default" : [ "org.apache.uima.fit.descriptor.ConfigurationParameter.NO_DEFAULT_VALUE" ],
            "type" : "string"
          },
          "in" : "query",
          "name" : "modelLocation",
          "description" : "Location from which the model is read.",
          "required" : false
        }, {
          "schema" : {
            "default" : [ "true" ],
            "type" : "boolean"
          },
          "in" : "query",
          "name" : "mappingEnabled",
          "description" : "Enable/disable type mapping.",
          "required" : true
        }, {
          "schema" : {
            "default" : [ "org.apache.uima.fit.descriptor.ConfigurationParameter.NO_DEFAULT_VALUE" ],
            "type" : "string"
          },
          "in" : "query",
          "name" : "POSMappingLocation",
          "description" : "Location of the mapping file for part-of-speech tags to UIMA types.",
          "required" : false
        }, {
          "schema" : {
            "default" : [ "true" ],
            "type" : "boolean"
          },
          "in" : "query",
          "name" : "ptb3Escaping",
          "description" : "Enable all traditional PTB3 token transforms (like -LRB-, -RRB-).",
          "required" : true
        }, {
          "schema" : {
            "default" : [ "org.apache.uima.fit.descriptor.ConfigurationParameter.NO_DEFAULT_VALUE" ]
          },
          "in" : "query",
          "name" : "quoteBegin",
          "description" : "List of extra token texts (usually single character strings) that should be treated like\nopening quotes and escaped accordingly before being sent to the parser.",
          "required" : false
        }, {
          "schema" : {
            "default" : [ "org.apache.uima.fit.descriptor.ConfigurationParameter.NO_DEFAULT_VALUE" ]
          },
          "in" : "query",
          "name" : "quoteEnd",
          "description" : "List of extra token texts (usually single character strings) that should be treated like\nclosing quotes and escaped accordingly before being sent to the parser.",
          "required" : false
        }, {
          "schema" : {
            "default" : [ "org.apache.uima.fit.descriptor.ConfigurationParameter.NO_DEFAULT_VALUE" ],
            "type" : "integer"
          },
          "in" : "query",
          "name" : "maxSentenceLength",
          "description" : "Sentences with more tokens than the specified max amount will be ignored if this parameter\nis set to a value larger than zero. The default value zero will allow all sentences to be\nPOS tagged.",
          "required" : false
        } ]
      }
    },
    "/StanfordDependencyConverter" : {
      "post" : {
        "summary" : "Converts a constituency structure into a dependency structure.",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CasConstituentToken"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CasDependency"
                }
              }
            }
          }
        },
        "parameters" : [ {
          "schema" : {
            "default" : [ "TREE" ]
          },
          "in" : "query",
          "name" : "mode",
          "description" : "Sets the kind of dependencies being created.",
          "required" : false
        }, {
          "schema" : {
            "default" : [ "org.apache.uima.fit.descriptor.ConfigurationParameter.NO_DEFAULT_VALUE" ],
            "type" : "string"
          },
          "in" : "query",
          "name" : "language",
          "description" : "Use this language instead of the document language to resolve the model and tag set mapping.",
          "required" : false
        }, {
          "schema" : {
            "default" : [ "true" ],
            "type" : "boolean"
          },
          "in" : "query",
          "name" : "originalDependencies",
          "description" : "Create original dependencies. If this is disabled, universal dependencies are created. The\ndefault is to create the original dependencies.",
          "required" : true
        } ]
      }
    },
    "/StanfordLemmatizer" : {
      "post" : {
        "summary" : "Stanford Lemmatizer component. The Stanford Morphology-class computes the base form of English\nwords, by removing just inflections (not derivational morphology). That is, it only does noun\nplurals, pronoun case, and verb endings, and not things like comparative adjectives or derived\nnominals. It is based on a finite-state transducer implemented by John Carroll et al., written in\nflex and publicly available. See:\nhttp://www.informatics.susx.ac.uk/research/nlp/carroll/morph.html\n\n<p>This only works for ENGLISH.</p>",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CasPOSToken"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CasLemma"
                }
              }
            }
          }
        },
        "parameters" : [ {
          "schema" : {
            "default" : [ "true" ],
            "type" : "boolean"
          },
          "in" : "query",
          "name" : "ptb3Escaping",
          "description" : "Enable all traditional PTB3 token transforms (like -LRB-, -RRB-).",
          "required" : true
        }, {
          "schema" : {
            "default" : [ "org.apache.uima.fit.descriptor.ConfigurationParameter.NO_DEFAULT_VALUE" ]
          },
          "in" : "query",
          "name" : "quoteBegin",
          "description" : "List of extra token texts (usually single character strings) that should be treated like\nopening quotes and escaped accordingly before being sent to the parser.",
          "required" : false
        }, {
          "schema" : {
            "default" : [ "org.apache.uima.fit.descriptor.ConfigurationParameter.NO_DEFAULT_VALUE" ]
          },
          "in" : "query",
          "name" : "quoteEnd",
          "description" : "List of extra token texts (usually single character strings) that should be treated like\nclosing quotes and escaped accordingly before being sent to the parser.",
          "required" : false
        } ]
      }
    },
    "/StanfordParser" : {
      "post" : {
        "summary" : "Stanford Parser component.",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CasPOSSentenceToken"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CasConstituentDependency"
                }
              }
            }
          }
        },
        "parameters" : [ {
          "schema" : {
            "default" : [ "false" ],
            "type" : "boolean"
          },
          "in" : "query",
          "name" : "printTagSet",
          "description" : "Write the tag set(s) to the log when a model is loaded.",
          "required" : true
        }, {
          "schema" : {
            "default" : [ "org.apache.uima.fit.descriptor.ConfigurationParameter.NO_DEFAULT_VALUE" ],
            "type" : "string"
          },
          "in" : "query",
          "name" : "language",
          "description" : "Use this language instead of the document language to resolve the model and tag set mapping.",
          "required" : false
        }, {
          "schema" : {
            "default" : [ "org.apache.uima.fit.descriptor.ConfigurationParameter.NO_DEFAULT_VALUE" ],
            "type" : "string"
          },
          "in" : "query",
          "name" : "modelVariant",
          "description" : "Variant of a model the model. Used to address a specific model if here are multiple models\nfor one language.",
          "required" : false
        }, {
          "schema" : {
            "default" : [ "org.apache.uima.fit.descriptor.ConfigurationParameter.NO_DEFAULT_VALUE" ],
            "type" : "string"
          },
          "in" : "query",
          "name" : "modelArtifactUri",
          "description" : "URI of the model artifact. This can be used to override the default model resolving \nmechanism and directly address a particular model.\n\n<p>The URI format is mvn:${groupId:${artifactId}:${version}}. Remember to set\nthe variant parameter to match the artifact. If the artifact contains the model in\na non-default location, you  also have to specify the model location parameter, e.g.\nclasspath:/model/path/in/artifact/model.bin.</p>",
          "required" : false
        }, {
          "schema" : {
            "default" : [ "org.apache.uima.fit.descriptor.ConfigurationParameter.NO_DEFAULT_VALUE" ],
            "type" : "string"
          },
          "in" : "query",
          "name" : "modelLocation",
          "description" : "Location from which the model is read.",
          "required" : false
        }, {
          "schema" : {
            "default" : [ "true" ],
            "type" : "boolean"
          },
          "in" : "query",
          "name" : "mappingEnabled",
          "description" : "Enable/disable type mapping.",
          "required" : true
        }, {
          "schema" : {
            "default" : [ "org.apache.uima.fit.descriptor.ConfigurationParameter.NO_DEFAULT_VALUE" ],
            "type" : "string"
          },
          "in" : "query",
          "name" : "POSMappingLocation",
          "description" : "Location of the mapping file for part-of-speech tags to UIMA types.",
          "required" : false
        }, {
          "schema" : {
            "default" : [ "org.apache.uima.fit.descriptor.ConfigurationParameter.NO_DEFAULT_VALUE" ],
            "type" : "string"
          },
          "in" : "query",
          "name" : "ConstituentMappingLocation",
          "description" : "Location of the mapping file for constituent tags to UIMA types.",
          "required" : false
        }, {
          "schema" : {
            "default" : [ "true" ],
            "type" : "boolean"
          },
          "in" : "query",
          "name" : "writeDependency",
          "description" : "Sets whether to create or not to create dependency annotations.",
          "required" : true
        }, {
          "schema" : {
            "default" : [ "TREE" ]
          },
          "in" : "query",
          "name" : "mode",
          "description" : "Sets the kind of dependencies being created.",
          "required" : false
        }, {
          "schema" : {
            "default" : [ "true" ],
            "type" : "boolean"
          },
          "in" : "query",
          "name" : "writeConstituent",
          "description" : "Sets whether to create or not to create constituent tags. This is required for POS-tagging\nand lemmatization.",
          "required" : true
        }, {
          "schema" : {
            "default" : [ "false" ],
            "type" : "boolean"
          },
          "in" : "query",
          "name" : "writePennTree",
          "description" : "If this parameter is set to true, each sentence is annotated with a PennTree-Annotation,\ncontaining the whole parse tree in Penn Treebank style format.",
          "required" : true
        }, {
          "schema" : {
            "default" : [ "org.apache.uima.fit.descriptor.ConfigurationParameter.NO_DEFAULT_VALUE" ],
            "type" : "string"
          },
          "in" : "query",
          "name" : "annotationTypeToParse",
          "description" : "This parameter can be used to override the standard behavior which uses the <i>Sentence</i>\nannotation as the basic unit for parsing.\n<p>If the parameter is set with the name of an annotation type <i>x</i>, the parser will no\nlonger parse <i>Sentence</i>-annotations, but <i>x</i>-Annotations.</p>",
          "required" : false
        }, {
          "schema" : {
            "default" : [ "false" ],
            "type" : "boolean"
          },
          "in" : "query",
          "name" : "writePOS",
          "description" : "Sets whether to create or not to create POS tags. The creation of constituent tags must be\nturned on for this to work.",
          "required" : true
        }, {
          "schema" : {
            "default" : [ "true" ],
            "type" : "boolean"
          },
          "in" : "query",
          "name" : "readPOS",
          "description" : "Sets whether to use or not to use already existing POS tags from another annotator for the\nparsing process.",
          "required" : true
        }, {
          "schema" : {
            "default" : [ "130" ],
            "type" : "integer"
          },
          "in" : "query",
          "name" : "maxSentenceLength",
          "description" : "Maximum number of tokens in a sentence. Longer sentences are not parsed. This is to avoid out\nof memory exceptions.",
          "required" : true
        }, {
          "schema" : {
            "default" : [ "200000" ],
            "type" : "integer"
          },
          "in" : "query",
          "name" : "maxItems",
          "description" : "Controls when the factored parser considers a sentence to be too complex and falls back to\nthe PCFG parser.",
          "required" : true
        }, {
          "schema" : {
            "default" : [ "true" ],
            "type" : "boolean"
          },
          "in" : "query",
          "name" : "ptb3Escaping",
          "description" : "Enable all traditional PTB3 token transforms (like -LRB-, -RRB-).",
          "required" : true
        }, {
          "schema" : {
            "default" : [ "org.apache.uima.fit.descriptor.ConfigurationParameter.NO_DEFAULT_VALUE" ]
          },
          "in" : "query",
          "name" : "quoteBegin",
          "description" : "List of extra token texts (usually single character strings) that should be treated like\nopening quotes and escaped accordingly before being sent to the parser.",
          "required" : false
        }, {
          "schema" : {
            "default" : [ "org.apache.uima.fit.descriptor.ConfigurationParameter.NO_DEFAULT_VALUE" ]
          },
          "in" : "query",
          "name" : "quoteEnd",
          "description" : "List of extra token texts (usually single character strings) that should be treated like\nclosing quotes and escaped accordingly before being sent to the parser.",
          "required" : false
        }, {
          "schema" : {
            "default" : [ "false" ],
            "type" : "boolean"
          },
          "in" : "query",
          "name" : "keepPunctuation",
          "description" : "Whether to keep the punctuation as part of the parse tree.",
          "required" : true
        } ]
      }
    },
    "/StanfordCoreferenceResolver" : {
      "post" : {
        "summary" : "",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CasConstituentLemmaNamedEntityPOSSentenceToken"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CasCoreferenceChainCoreferenceLink"
                }
              }
            }
          }
        },
        "parameters" : [ {
          "schema" : {
            "default" : [ "MarkRole, DiscourseMatch, ExactStringMatch, RelaxedExactStringMatch, PreciseConstructs, StrictHeadMatch1, StrictHeadMatch2, StrictHeadMatch3, StrictHeadMatch4, RelaxedHeadMatch, PronounMatch" ],
            "type" : "string"
          },
          "in" : "query",
          "name" : "sieves",
          "description" : "DCoRef parameter: Sieve passes - each class is defined in dcoref/sievepasses/.",
          "required" : true
        }, {
          "schema" : {
            "default" : [ "false" ],
            "type" : "boolean"
          },
          "in" : "query",
          "name" : "score",
          "description" : "DCoRef parameter: Scoring the output of the system",
          "required" : true
        }, {
          "schema" : {
            "default" : [ "false" ],
            "type" : "boolean"
          },
          "in" : "query",
          "name" : "postprocessing",
          "description" : "DCoRef parameter: Do post processing",
          "required" : true
        }, {
          "schema" : {
            "default" : [ "true" ],
            "type" : "boolean"
          },
          "in" : "query",
          "name" : "singleton",
          "description" : "DCoRef parameter: setting singleton predictor",
          "required" : true
        }, {
          "schema" : {
            "default" : [ "-1" ],
            "type" : "integer"
          },
          "in" : "query",
          "name" : "maxDist",
          "description" : "DCoRef parameter: Maximum sentence distance between two mentions for resolution (-1: no\nconstraint on the distance)",
          "required" : true
        } ]
      }
    }
  },
  "info" : {
    "title" : "DKPro Teanga Wrapper",
    "version" : "1.0"
  }
}