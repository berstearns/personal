{
  "components" : {
    "schemas" : {
      "CasConstituentPennTree" : {
        "type" : "object",
        "required" : [ "documentText", "language" ],
        "properties" : {
          "constituent" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Constituent"
            }
          },
          "pennTree" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/PennTree"
            }
          },
          "documentText" : {
            "type" : "string"
          },
          "language" : {
            "type" : "string"
          }
        }
      },
      "MorphologicalFeatures" : {
        "type" : "object",
        "required" : [ "begin", "end" ],
        "properties" : {
          "voice" : {
            "type" : "string"
          },
          "mood" : {
            "type" : "string"
          },
          "gender" : {
            "type" : "string"
          },
          "degree" : {
            "type" : "string"
          },
          "animacy" : {
            "type" : "string"
          },
          "reflex" : {
            "type" : "string"
          },
          "verbForm" : {
            "type" : "string"
          },
          "number" : {
            "type" : "string"
          },
          "pronType" : {
            "type" : "string"
          },
          "negative" : {
            "type" : "string"
          },
          "person" : {
            "type" : "string"
          },
          "transitivity" : {
            "type" : "string"
          },
          "aspect" : {
            "type" : "string"
          },
          "possessive" : {
            "type" : "string"
          },
          "end" : {
            "type" : "integer"
          },
          "numType" : {
            "type" : "string"
          },
          "begin" : {
            "type" : "integer"
          },
          "value" : {
            "type" : "string"
          },
          "tense" : {
            "type" : "string"
          },
          "case" : {
            "type" : "string"
          },
          "definiteness" : {
            "type" : "string"
          }
        }
      },
      "POS" : {
        "type" : "object",
        "required" : [ "begin", "end" ],
        "properties" : {
          "posValue" : {
            "type" : "string"
          },
          "end" : {
            "type" : "integer"
          },
          "begin" : {
            "type" : "integer"
          },
          "coarseValue" : {
            "type" : "string"
          }
        }
      },
      "Lemma" : {
        "type" : "object",
        "required" : [ "begin", "end" ],
        "properties" : {
          "end" : {
            "type" : "integer"
          },
          "begin" : {
            "type" : "integer"
          },
          "value" : {
            "type" : "string"
          }
        }
      },
      "TokenForm" : {
        "type" : "object",
        "required" : [ "begin", "end" ],
        "properties" : {
          "end" : {
            "type" : "integer"
          },
          "begin" : {
            "type" : "integer"
          },
          "value" : {
            "type" : "string"
          }
        }
      },
      "CasSentenceToken" : {
        "type" : "object",
        "required" : [ "documentText", "language" ],
        "properties" : {
          "sentence" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Sentence"
            }
          },
          "documentText" : {
            "type" : "string"
          },
          "language" : {
            "type" : "string"
          },
          "token" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Token"
            }
          }
        }
      },
      "Token" : {
        "type" : "object",
        "required" : [ "begin", "end" ],
        "properties" : {
          "parent" : {
            "$ref" : "#/components/schemas/Annotation"
          },
          "form" : {
            "$ref" : "#/components/schemas/TokenForm"
          },
          "pos" : {
            "$ref" : "#/components/schemas/POS"
          },
          "lemma" : {
            "$ref" : "#/components/schemas/Lemma"
          },
          "syntacticFunction" : {
            "type" : "string"
          },
          "end" : {
            "type" : "integer"
          },
          "id" : {
            "type" : "string"
          },
          "text" : {
            "type" : "string"
          },
          "morph" : {
            "$ref" : "#/components/schemas/MorphologicalFeatures"
          },
          "begin" : {
            "type" : "integer"
          },
          "stem" : {
            "$ref" : "#/components/schemas/Stem"
          }
        }
      },
      "Sentence" : {
        "type" : "object",
        "required" : [ "begin", "end" ],
        "properties" : {
          "end" : {
            "type" : "integer"
          },
          "id" : {
            "type" : "string"
          },
          "begin" : {
            "type" : "integer"
          }
        }
      },
      "PennTree" : {
        "type" : "object",
        "required" : [ "begin", "end" ],
        "properties" : {
          "pennTree" : {
            "type" : "string"
          },
          "end" : {
            "type" : "integer"
          },
          "transformationNames" : {
            "type" : "string"
          },
          "begin" : {
            "type" : "integer"
          }
        }
      },
      "Annotation" : {
        "type" : "object",
        "required" : [ "begin", "end" ],
        "properties" : {
          "end" : {
            "type" : "integer"
          },
          "begin" : {
            "type" : "integer"
          }
        }
      },
      "Stem" : {
        "type" : "object",
        "required" : [ "begin", "end" ],
        "properties" : {
          "end" : {
            "type" : "integer"
          },
          "begin" : {
            "type" : "integer"
          },
          "value" : {
            "type" : "string"
          }
        }
      },
      "Constituent" : {
        "type" : "object",
        "required" : [ "begin", "end" ],
        "properties" : {
          "parent" : {
            "$ref" : "#/components/schemas/Annotation"
          },
          "constituentType" : {
            "type" : "string"
          },
          "children" : { },
          "syntacticFunction" : {
            "type" : "string"
          },
          "end" : {
            "type" : "integer"
          },
          "begin" : {
            "type" : "integer"
          }
        }
      }
    }
  },
  "openapi" : "3.0.0",
  "paths" : {
    "/BerkeleyParser" : {
      "post" : {
        "summary" : "Berkeley Parser annotator. Requires Sentences to be annotated before.",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CasSentenceToken"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CasConstituentPennTree"
                }
              }
            }
          }
        },
        "parameters" : [ {
          "schema" : {
            "default" : [ "org.apache.uima.fit.descriptor.ConfigurationParameter.NO_DEFAULT_VALUE" ],
            "type" : "string"
          },
          "in" : "query",
          "name" : "language",
          "description" : "Use this language instead of the language set in the CAS to locate the model.",
          "required" : false
        }, {
          "schema" : {
            "default" : [ "org.apache.uima.fit.descriptor.ConfigurationParameter.NO_DEFAULT_VALUE" ],
            "type" : "string"
          },
          "in" : "query",
          "name" : "modelVariant",
          "description" : "Override the default variant used to locate the model.",
          "required" : false
        }, {
          "schema" : {
            "default" : [ "org.apache.uima.fit.descriptor.ConfigurationParameter.NO_DEFAULT_VALUE" ],
            "type" : "string"
          },
          "in" : "query",
          "name" : "modelArtifactUri",
          "description" : "URI of the model artifact. This can be used to override the default model resolving \nmechanism and directly address a particular model.\n\n<p>The URI format is mvn:${groupId:${artifactId}:${version}}. Remember to set\nthe variant parameter to match the artifact. If the artifact contains the model in\na non-default location, you  also have to specify the model location parameter, e.g.\nclasspath:/model/path/in/artifact/model.bin.</p>",
          "required" : false
        }, {
          "schema" : {
            "default" : [ "org.apache.uima.fit.descriptor.ConfigurationParameter.NO_DEFAULT_VALUE" ],
            "type" : "string"
          },
          "in" : "query",
          "name" : "modelLocation",
          "description" : "Load the model from this location instead of locating the model automatically.",
          "required" : false
        }, {
          "schema" : {
            "default" : [ "true" ],
            "type" : "boolean"
          },
          "in" : "query",
          "name" : "mappingEnabled",
          "description" : "Enable/disable type mapping.",
          "required" : true
        }, {
          "schema" : {
            "default" : [ "org.apache.uima.fit.descriptor.ConfigurationParameter.NO_DEFAULT_VALUE" ],
            "type" : "string"
          },
          "in" : "query",
          "name" : "POSMappingLocation",
          "description" : "Location of the mapping file for part-of-speech tags to UIMA types.",
          "required" : false
        }, {
          "schema" : {
            "default" : [ "org.apache.uima.fit.descriptor.ConfigurationParameter.NO_DEFAULT_VALUE" ],
            "type" : "string"
          },
          "in" : "query",
          "name" : "ConstituentMappingLocation",
          "description" : "Location of the mapping file for constituent tags to UIMA types.",
          "required" : false
        }, {
          "schema" : {
            "default" : [ "false" ],
            "type" : "boolean"
          },
          "in" : "query",
          "name" : "printTagSet",
          "description" : "Log the tag set(s) when a model is loaded.",
          "required" : true
        }, {
          "schema" : {
            "default" : [ "true" ],
            "type" : "boolean"
          },
          "in" : "query",
          "name" : "readPOS",
          "description" : "Sets whether to use or not to use already existing POS tags from another annotator for the\nparsing process.",
          "required" : true
        }, {
          "schema" : {
            "default" : [ "false" ],
            "type" : "boolean"
          },
          "in" : "query",
          "name" : "writePOS",
          "description" : "Sets whether to create or not to create POS tags. The creation of constituent tags must be\nturned on for this to work.",
          "required" : true
        }, {
          "schema" : {
            "default" : [ "false" ],
            "type" : "boolean"
          },
          "in" : "query",
          "name" : "writePennTree",
          "description" : "If this parameter is set to true, each sentence is annotated with a PennTree-Annotation,\ncontaining the whole parse tree in Penn Treebank style format.",
          "required" : true
        }, {
          "schema" : {
            "default" : [ "false" ],
            "type" : "boolean"
          },
          "in" : "query",
          "name" : "viterbi",
          "description" : "Compute Viterbi derivation instead of max-rule tree.",
          "required" : true
        }, {
          "schema" : {
            "default" : [ "false" ],
            "type" : "boolean"
          },
          "in" : "query",
          "name" : "substates",
          "description" : "Output sub-categories (only for binarized Viterbi trees).",
          "required" : true
        }, {
          "schema" : {
            "default" : [ "false" ],
            "type" : "boolean"
          },
          "in" : "query",
          "name" : "scores",
          "description" : "Output inside scores (only for binarized viterbi trees).",
          "required" : true
        }, {
          "schema" : {
            "default" : [ "false" ],
            "type" : "boolean"
          },
          "in" : "query",
          "name" : "accurate",
          "description" : "Set thresholds for accuracy instead of efficiency.",
          "required" : true
        }, {
          "schema" : {
            "default" : [ "false" ],
            "type" : "boolean"
          },
          "in" : "query",
          "name" : "variational",
          "description" : "Use variational rule score approximation instead of max-rule",
          "required" : true
        }, {
          "schema" : {
            "default" : [ "false" ],
            "type" : "boolean"
          },
          "in" : "query",
          "name" : "keepFunctionLabels",
          "description" : "Retain predicted function labels. Model must have been trained with function labels.",
          "required" : true
        }, {
          "schema" : {
            "default" : [ "false" ],
            "type" : "boolean"
          },
          "in" : "query",
          "name" : "binarize",
          "description" : "Output binarized trees.",
          "required" : true
        } ]
      }
    }
  },
  "info" : {
    "title" : "DKPro Teanga Wrapper",
    "version" : "1.0"
  }
}